#+options: toc:nil date:nil author:nil

#+latex_header: \usepackage{listings}
#+latex_header: \lstdefinestyle{source}{basicstyle=\footnotesize\ttfamily,frame=tb}
#+latex_header: \lstset{style=source}
#+latex_header: \usepackage[margin=2.5cm]{geometry}

* init

  #+begin_src emacs-lisp
;; From http://www.emacswiki.org/emacs/LoadPath#AddSubDirectories
;; to add a directory and its subdirectories
(let ((default-directory my-emacs-personal-dir)
      (personal-el-file (expand-file-name "personal.el" my-emacs-personal-dir))
      (personal-org-file (expand-file-name "personal.org" my-emacs-personal-dir)))
  (make-directory default-directory t)
  ;; for some reason, this is not working to add all subdirectories of
  ;; the personal dir to load-path, in a way that they added at the
  ;; beginning of the list.

  ;; (setq load-path
  ;;       (append
  ;;        (let ((load-path (copy-sequence load-path))) ;; Shadow
  ;;          (append
  ;;           (copy-sequence (normal-top-level-add-to-load-path '(".")))
  ;;           (normal-top-level-add-subdirs-to-load-path)))
  ;;        load-path))
  (normal-top-level-add-subdirs-to-load-path)
  (if (file-exists-p personal-org-file)
      (org-babel-load-file personal-org-file)
    (if (file-exists-p personal-el-file)
	(load personal-el-file))))

(make-directory "~/backups/" t)

(setq custom-file (concat user-emacs-directory "custom.el"))
(load custom-file 'noerror)

(setq initial-buffer-choice (expand-file-name "welcome.org" my-emacs-dir))

(defun make-backup-file-name (file-name)
  "Create the non-numeric backup file name for `file-name'."
  (require 'dired)
  (if (file-exists-p "~/backups")
      (concat (expand-file-name "~/backups/")
              (dired-replace-in-string "/" "-" file-name))
    (concat file-name "~")))

(setq-default abbrev-mode t)

(column-number-mode t)

(setq termux-p
      (or (string-suffix-p "linux-android" system-configuration)
	  (string-prefix-p "arm-unknown-linux" system-configuration)))

(if (not termux-p)
    (display-battery-mode))

(setq windows-p
      (string-suffix-p "mingw32" system-configuration))

(if windows-p
    (set-language-environment "UTF-8"))

(setq laboratorio-p (string-prefix-p "equipo" (system-name)))

(if laboratorio-p
    (progn
      (org-defkey org-cdlatex-mode-map (kbd "/") #'cdlatex-math-symbol)
      (setq cdlatex-math-symbol-prefix ?/)))

(display-time)

(setq confirm-nonexistent-file-or-buffer nil)

(add-hook 'text-mode-hook 'turn-on-auto-fill)

(setq mouse-drag-copy-region t)

;; from http://stackoverflow.com/a/9414763/577007
(defun prelude-copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))

;; From: sandipchitale@yahoo.com (Sandip Chitale)
;; Newsgroups: gnu.emacs.sources
;; Subject: CODE: Duplicate line or region backward or forward
;; Date: 7 Feb 2004 12:15:35 -0800
(defun duplicate-line-backward ()
  "Duplicate the current line backward."
  (interactive "*")
  (save-excursion
    (let ((contents (buffer-substring
                     (line-beginning-position)
                     (line-end-position))))
      (beginning-of-line)
      (insert contents ?\n)))
  (previous-line 1))

(defun duplicate-line-forward ()
  "Duplicate the current line forward."
  (interactive "*")
  (save-excursion
    (let ((contents (buffer-substring
                     (line-beginning-position)
                     (line-end-position))))
      (end-of-line)
      (insert ?\n contents)))
  (next-line 1))

(global-set-key [(super down)] 'duplicate-line-forward)
(global-set-key [(super up)] 'duplicate-line-backward)
  #+end_src

* auctex                                                               :math:

  https://www.gnu.org/software/auctex/

  #+BEGIN_QUOTE
  AUCTeX is an extensible package for writing and formatting TeX files
  in GNU Emacs and XEmacs. It supports many different TeX macro
  packages, including AMS-TeX, LaTeX, Texinfo, ConTeXt, and docTeX
  (dtx files).
  #+END_QUOTE

  #+begin_src emacs-lisp
(use-package tex
  :ensure auctex
  :mode ("\\.tex\\'" . latex-mode)
  :preface
  (defun my-latex-config ()
    (LaTeX-math-mode)
    (TeX-add-symbols '("emph" 1))
    (LaTeX-add-environments '("definition")
			    '("theorem")
			    '("lemma")
			    '("corollary")
			    '("definicion")
			    '("teorema")
			    '("lema")
			    '("corolario"))
    (TeX-run-style-hooks "tikz")
    (TeX-run-style-hooks "tkz-graph")
    (TeX-run-style-hooks "tkz-berge"))
  :config
  (setq TeX-auto-save t
	TeX-electric-escape t
	TeX-insert-braces nil
	TeX-parse-self t
	TeX-save-query nil)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (add-hook 'LaTeX-mode-hook 'my-latex-config)
  (setq reftex-plug-into-AUCTeX t
	reftex-use-external-file-finders t))
  #+end_src

* bibretrieve

  https://github.com/pzorin/bibretrieve

  #+begin_quote
  An Emacs library for searching and downloading BibTeX entries from the web.
  #+end_quote

  #+begin_src emacs-lisp
(use-package bibretrieve
  :ensure t)
  #+end_src

* cdlatex                                                              :math:

  https://staff.fnwi.uva.nl/c.dominik/Tools/cdlatex/

  #+BEGIN_QUOTE
  CDLaTeX is a minor mode for Emacs supporting fast insertion of
  environment templates and math stuff in LaTeX. Similar commands are
  also offered as part of the AUCTeX package, but it is not the same -
  CDLaTeX focuses on speediness for inserting LaTeX constructs. I
  myself am using CDLaTeX on top of AUCTeX.
  #+END_QUOTE

  #+begin_src emacs-lisp
(use-package cdlatex
  :ensure t
  :config
  (setq cdlatex-math-symbol-alist
	'(( ?c   ("\\colon"))
	  ( ?m   ("\\mu" "\\mapsto"))
	  ( ?p   ("\\pi" "\\varpi" "\\perp"))
	  ( ?O   ("\\Omega" "\\mathrm{Orb}"))
	  ( ?S   ("\\Sigma" "\\mathrm{Stab}"))
	  ( ?-   ("\\cap" "\\leftrightarrow" "\\longleftrightarrow"))
	  ( ?.   ("\\ldots" "\\cdots" "\\cdot"))
	  ( ?<   ("\\leq" "\\langle"))
	  ( ?>   ("\\geq" "\\rangle"))
	  ( 123  ("\\{ \\}"))
	  ( 125  ("\\subseteq"))
	  ( ?\[  ("\\subseteq"))))

  (setq cdlatex-math-modify-alist
      '(( ?B "\\mathbb"         nil t nil nil)
	( ?a "\\overrightarrow" nil t nil nil)))

  (setq cdlatex-command-alist
      '(("bin"  "Insert \\binom{}{}"
	 "\\binom{?}{}"       cdlatex-position-cursor nil nil t)
	("norm" "Insert \\Vert \\Vert"
	 "\\Vert ?\\Vert"     cdlatex-position-cursor nil nil t)
	("gen"  "Insert \\langle \\rangle"
	 "\\langle ?\\rangle" cdlatex-position-cursor nil nil t)
	("set"  "Insert a set"
	 "\\{?\\mid \\}"      cdlatex-position-cursor nil nil t)))

  (setq cdlatex-simplify-sub-super-scripts nil))
  #+end_src

* dired

  https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html

  #+BEGIN_QUOTE
  Dired makes an Emacs buffer containing a listing of a directory, and
  optionally some of its subdirectories as well. You can use the
  normal Emacs commands to move around in this buffer, and special
  Dired commands to operate on the listed files.
  #+END_QUOTE

  #+BEGIN_SRC emacs-lisp
(use-package dired
  :bind (:map dired-mode-map
	      ("r". dired-start-process))
  :preface
  ;; see https://oremacs.com/2015/01/04/dired-nohup/
  (defun dired-start-process (cmd &optional file-list)
    (interactive
     (let ((files (dired-get-marked-files
		   t current-prefix-arg)))
       (list
	(dired-read-shell-command "& on %s: "
				  current-prefix-arg files)
	files)))
    (let (list-switch)
      (start-process
       cmd nil shell-file-name
       shell-command-switch
       (format
	"nohup 1>/dev/null 2>/dev/null %s \"%s\""
	(if (and (> (length file-list) 1)
		 (setq list-switch
		       (cadr (assoc cmd dired-filelist-cmd))))
	    (format "%s %s" cmd list-switch)
	  cmd)
	(mapconcat #'expand-file-name file-list "\" \"")))))
  :config
  (setq dired-guess-shell-alist-user
	'(("." "xdg-open" "termux-share"))
	dired-dwim-target t)
  (use-package dired-aux)
  (use-package dired-x))
  #+END_SRC

* doom-modeline

  #+begin_src emacs-lisp
(if (not termux-p)
    (use-package doom-modeline
      :ensure t
      :config (doom-modeline-mode)))
  #+end_src

* elpy

  #+begin_src emacs-lisp
(use-package elpy
  :ensure t
  :config
  (elpy-enable)
  (setq python-shell-interpreter "ipython"
	python-shell-interpreter-args "--i --simple-prompt"))
  #+end_src

* gap-mode                                                             :math:

  #+begin_src emacs-lisp
(use-package gap-mode
  :ensure t
  :config
  (setq gap-executable "gap"
	gap-start-options  '("-E" "-f" "-b" "-m" "1024m")))
  #+end_src

* helm

  #+begin_src emacs-lisp
(use-package helm
  :ensure t
  :config
  (use-package helm-unicode
    :ensure t))
  #+end_src

* ido

  #+begin_src emacs-lisp
(use-package ido
  :config
  (ido-mode 1))
  #+end_src

* magit

  #+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-c m" . magit-status))
  #+end_src

* markdown-mode

  https://jblevins.org/projects/markdown-mode/

  #+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t)
  #+end_src
* move-text

  https://github.com/emacsfodder/move-text

  #+begin_src emacs-lisp
(use-package move-text
  :ensure t
  :bind (([(super left)] . move-text-up)
	 ([(super right)] . move-text-down)))
  #+end_src

* org

  #+begin_src emacs-lisp
(use-package org
  :bind (("C-c a" . org-agenda)
	 :map org-mode-map
	 ("$". yf/org-electric-dollar))
  :preface
  ;; from Nicolas Richard <theonewiththeevillook@yahoo.fr>
  ;; Date: Fri, 8 Mar 2013 16:23:02 +0100
  ;; Message-ID: <87vc913oh5.fsf@yahoo.fr>
  (defun yf/org-electric-dollar nil
    "When called once, insert \\(\\) and leave point in between.
When called twice, replace the previously inserted \\(\\) by one $."
    (interactive)
    (if (and (looking-at "\\\\)") (looking-back "\\\\("))
	(progn (delete-char 2)
	       (delete-char -2)
	       (insert "$"))
      (insert "\\(\\)")
      (backward-char 2)))
  ;; see https://lists.gnu.org/archive/html/emacs-orgmode/2015-09/msg00118.html
  (defmacro by-backend (&rest body)
    `(case org-export-current-backend ,@body))
  (defun my-org-mode-hook ()
    (turn-on-auto-revert-mode)
    (turn-on-org-cdlatex))
  :config
  (require 'ox-beamer)
  (use-package htmlize
    :ensure t)
  (if (not termux-p)
      (use-package ob-ipython
	:ensure t))
  (use-package ob-sagemath
    :ensure t)
  (use-package org-pomodoro
    :ensure t
    :commands (org-pomodoro)
    :config
    (setq alert-user-configuration
	  (quote ((((:category . "org-pomodoro")) libnotify nil)))))
  (use-package org-ref
    :ensure t)
  (use-package ox-ipynb
    :load-path "ox-ipynb/")
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (ruby . t)
     (latex . t)))
  (setq org-beamer-environments-extra
	'(("corollary"   "r" "\\begin{corollary}%a%U"   "\\end{corollary}")
	  ("lemma"       "l" "\\begin{lemma}%a%U"       "\\end{lemma}")
	  ("proposition" "P" "\\begin{proposition}%a%U" "\\end{proposition}"))
	org-export-with-tags nil
	org-file-apps
	'((auto-mode . emacs)
	  ("pdf" . "evince %s"))
	org-highlight-latex-and-related '(latex)
	org-latex-listings t
	org-log-done 'note
	org-return-follows-link t
	org-src-fontify-natively t
	org-src-preserve-indentation t
	org-support-shift-select 'always)
  (add-hook 'org-mode-hook #'my-org-mode-hook)
  ;; when in :bind, these produce "Autoloading failed to define function"
  (define-key org-mode-map (kbd "s-j") #'org-babel-next-src-block)
  (define-key org-mode-map (kbd "s-k") #'org-babel-previous-src-block)
  (define-key org-mode-map (kbd "s-l") #'org-edit-src-code)
  (define-key org-src-mode-map (kbd "s-l") #'org-edit-src-exit))
  #+end_src

* sage-shell-mode

  https://github.com/sagemath/sage-shell-mode

  #+begin_quote
  Emacs front end for SageMath
  #+end_quote

  #+begin_src emacs-lisp
(use-package sage-shell-mode
  :ensure t)
  #+end_src

* smartparens

  https://github.com/Fuco1/smartparens

  #+BEGIN_QUOTE
  Smartparens is a minor mode for dealing with pairs in Emacs.
  #+END_QUOTE

  #+begin_src emacs-lisp
(use-package smartparens
  :ensure t
  :config
  (require 'smartparens-config)
  (smartparens-global-mode 1)
  (show-smartparens-global-mode 1)
  (sp-local-pair 'org-mode "=" "="
		 :unless '(sp-point-after-word-p sp-in-math-p)
		 :post-handlers '(("[d1]" "SPC")))
  (sp-local-pair 'python-mode "``" "``"))
  #+end_src

* smex

  https://github.com/nonsequitur/smex/

  #+BEGIN_QUOTE
  Smex is a M-x enhancement for Emacs. Built on top of Ido, it
  provides a convenient interface to your recently and most frequently
  used commands. And to all the other commands, too.
  #+END_QUOTE

  #+begin_src emacs-lisp
(use-package smex
  :ensure t
  :bind ("M-x" . smex)
  :config (smex-initialize))
  #+end_src

* yasnippet

  https://github.com/joaotavora/yasnippet

  #+BEGIN_QUOTE
  YASnippet is a template system for Emacs. It allows you to type an
  abbreviation and automatically expand it into function
  templates. Bundled language templates include: C, C++, C#, Perl,
  Python, Ruby, SQL, LaTeX, HTML, CSS and more. The snippet syntax is
  inspired from TextMate's syntax, you can even import most TextMate
  templates to YASnippet. Watch a demo on YouTube.
  #+END_QUOTE

  #+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config (yas-global-mode))
  #+end_src

* zerodark-theme

  #+begin_src emacs-lisp
(use-package zerodark-theme
  :ensure t)
  #+end_src



* COMMENT Not for termux

** sage-shell-mode
