#+options: toc:nil date:nil author:nil

#+latex_header: \usepackage{listings}
#+latex_header: \lstdefinestyle{source}{basicstyle=\footnotesize\ttfamily,frame=tb}
#+latex_header: \lstset{style=source}
#+latex_header: \usepackage[margin=2.5cm]{geometry}

* init

  #+begin_src emacs-lisp
;; From http://www.emacswiki.org/emacs/LoadPath#AddSubDirectories
;; to add a directory and its subdirectories
(let ((default-directory my-emacs-personal-dir)
      (personal-el-file (expand-file-name "personal.el" my-emacs-personal-dir))
      (personal-org-file (expand-file-name "personal.org" my-emacs-personal-dir)))
  (make-directory default-directory t)
  ;; for some reason, this is not working to add all subdirectories of
  ;; the personal dir to load-path, in a way that they added at the
  ;; beginning of the list.

  ;; (setq load-path
  ;;       (append
  ;;        (let ((load-path (copy-sequence load-path))) ;; Shadow
  ;;          (append
  ;;           (copy-sequence (normal-top-level-add-to-load-path '(".")))
  ;;           (normal-top-level-add-subdirs-to-load-path)))
  ;;        load-path))
  (normal-top-level-add-subdirs-to-load-path)
  (if (file-exists-p personal-org-file)
      (org-babel-load-file personal-org-file)
    (if (file-exists-p personal-el-file)
	(load personal-el-file))))

(make-directory "~/backups/" t)

(defun make-backup-file-name (file-name)
  "Create the non-numeric backup file name for `file-name'."
  (require 'dired)
  (if (file-exists-p "~/backups")
      (concat (expand-file-name "~/backups/")
              (dired-replace-in-string "/" "-" file-name))
    (concat file-name "~")))

(setq abbrev-mode t
      confirm-nonexistent-file-or-buffer nil
      custom-file (concat user-emacs-directory "custom.el")
      initial-buffer-choice (expand-file-name "welcome.org" my-emacs-dir)
      frame-title-format "%b: %+%+ %f"
      laboratorio-p (string-prefix-p "equipo" (system-name))
      mouse-drag-copy-region t
      termux-p
      (or (string-suffix-p "linux-android" system-configuration)
	  (string-prefix-p "arm-unknown-linux" system-configuration))
      windows-p
      (string-suffix-p "mingw32" system-configuration))

(load custom-file 'noerror)

(column-number-mode t)

(if (not termux-p)
    (display-battery-mode))

(if windows-p
    (set-language-environment "UTF-8"))

(if laboratorio-p
    (progn
      (org-defkey org-cdlatex-mode-map (kbd "/") #'cdlatex-math-symbol)
      (setq cdlatex-math-symbol-prefix ?/)))

(display-time)

(add-hook 'text-mode-hook 'turn-on-auto-fill)

;; from http://stackoverflow.com/a/9414763/577007
(defun prelude-copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))

;; From: sandipchitale@yahoo.com (Sandip Chitale)
;; Newsgroups: gnu.emacs.sources
;; Subject: CODE: Duplicate line or region backward or forward
;; Date: 7 Feb 2004 12:15:35 -0800
(defun duplicate-line-backward ()
  "Duplicate the current line backward."
  (interactive "*")
  (save-excursion
    (let ((contents (buffer-substring
                     (line-beginning-position)
                     (line-end-position))))
      (beginning-of-line)
      (insert contents ?\n)))
  (previous-line 1))

(defun duplicate-line-forward ()
  "Duplicate the current line forward."
  (interactive "*")
  (save-excursion
    (let ((contents (buffer-substring
                     (line-beginning-position)
                     (line-end-position))))
      (end-of-line)
      (insert ?\n contents)))
  (next-line 1))

(global-set-key [(super down)] 'duplicate-line-forward)
(global-set-key [(super up)] 'duplicate-line-backward)
  #+end_src

* auctex                                                               :math:

  https://www.gnu.org/software/auctex/

  #+BEGIN_QUOTE
  AUCTeX is an extensible package for writing and formatting TeX files
  in GNU Emacs and XEmacs. It supports many different TeX macro
  packages, including AMS-TeX, LaTeX, Texinfo, ConTeXt, and docTeX
  (dtx files).
  #+END_QUOTE

  #+begin_src emacs-lisp
(use-package tex
  :ensure auctex
  :mode ("\\.tex\\'" . latex-mode)
  :init
  (defun my-latex-config ()
    (LaTeX-math-mode)
    (TeX-add-symbols '("emph" 1))
    (LaTeX-add-environments '("definition")
			    '("theorem")
			    '("lemma")
			    '("corollary")
			    '("definicion")
			    '("teorema")
			    '("lema")
			    '("corolario"))
    (TeX-run-style-hooks "tikz")
    (TeX-run-style-hooks "tkz-graph")
    (TeX-run-style-hooks "tkz-berge"))
  :custom
  (TeX-auto-save t)
  (TeX-electric-escape t)
  (TeX-insert-braces nil)
  (TeX-parse-self t)
  (TeX-save-query nil)
  (reftex-plug-into-AUCTeX t)
  (reftex-use-external-file-finders t)
  :hook
  (LaTeX-mode . my-latex-config)
  (LaTeX-mode . turn-on-reftex))
  #+end_src

* bibretrieve

  https://github.com/pzorin/bibretrieve

  #+begin_quote
  An Emacs library for searching and downloading BibTeX entries from the web.
  #+end_quote

  #+begin_src emacs-lisp
(use-package bibretrieve
  :ensure t)
  #+end_src

* cdlatex                                                              :math:

  https://staff.fnwi.uva.nl/c.dominik/Tools/cdlatex/

  #+BEGIN_QUOTE
  CDLaTeX is a minor mode for Emacs supporting fast insertion of
  environment templates and math stuff in LaTeX. Similar commands are
  also offered as part of the AUCTeX package, but it is not the same -
  CDLaTeX focuses on speediness for inserting LaTeX constructs. I
  myself am using CDLaTeX on top of AUCTeX.
  #+END_QUOTE

  #+begin_src emacs-lisp
(use-package cdlatex
  :ensure t
  :custom
  (cdlatex-math-symbol-alist
   '(( ?c   ("\\colon"))
     ( ?m   ("\\mu" "\\mapsto"))
     ( ?p   ("\\pi" "\\varpi" "\\perp"))
     ( ?O   ("\\Omega" "\\mathrm{Orb}"))
     ( ?S   ("\\Sigma" "\\mathrm{Stab}"))
     ( ?-   ("\\cap" "\\leftrightarrow" "\\longleftrightarrow"))
     ( ?.   ("\\ldots" "\\cdots" "\\cdot"))
     ( ?<   ("\\leq" "\\langle"))
     ( ?>   ("\\geq" "\\rangle"))
     ( 123  ("\\{ \\}"))
     ( 125  ("\\subseteq"))
     ( ?\[  ("\\subseteq"))))
  (cdlatex-math-modify-alist
   '(( ?B "\\mathbb"         nil t nil nil)
     ( ?a "\\overrightarrow" nil t nil nil)))
  (cdlatex-command-alist
   '(("bin"  "Insert \\binom{}{}"
      "\\binom{?}{}"       cdlatex-position-cursor nil nil t)
     ("norm" "Insert \\Vert \\Vert"
      "\\Vert ?\\Vert"     cdlatex-position-cursor nil nil t)
     ("gen"  "Insert \\langle \\rangle"
      "\\langle ?\\rangle" cdlatex-position-cursor nil nil t)
     ("set"  "Insert a set"
      "\\{?\\mid \\}"      cdlatex-position-cursor nil nil t)))
  (cdlatex-simplify-sub-super-scripts nil))
  #+end_src

* dired

  https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html

  #+BEGIN_QUOTE
  Dired makes an Emacs buffer containing a listing of a directory, and
  optionally some of its subdirectories as well. You can use the
  normal Emacs commands to move around in this buffer, and special
  Dired commands to operate on the listed files.
  #+END_QUOTE

  #+BEGIN_SRC emacs-lisp
(use-package dired
  :bind (:map dired-mode-map
	      ("r". dired-start-process))
  :init
  ;; see https://oremacs.com/2015/01/04/dired-nohup/
  (defun dired-start-process (cmd &optional file-list)
    (interactive
     (let ((files (dired-get-marked-files
		   t current-prefix-arg)))
       (list
	(dired-read-shell-command "& on %s: "
				  current-prefix-arg files)
	files)))
    (let (list-switch)
      (start-process
       cmd nil shell-file-name
       shell-command-switch
       (format
	"nohup 1>/dev/null 2>/dev/null %s \"%s\""
	(if (and (> (length file-list) 1)
		 (setq list-switch
		       (cadr (assoc cmd dired-filelist-cmd))))
	    (format "%s %s" cmd list-switch)
	  cmd)
	(mapconcat #'expand-file-name file-list "\" \"")))))
  :custom
  ;; these are the commands that dired will run when pressed "!"
  ;; we can cycle with "M-n", "M-p"
  ;; since there is a "." (regexp), this will work for all file types
  (dired-guess-shell-alist-user
	'(("." "xdg-open" "termux-share")))
  (dired-dwim-target t)
  :config
  ;; both dired-aux and dired-x come with emacs
  (use-package dired-aux)
  (use-package dired-x))
  #+END_SRC

* doom-modeline

  Only one of two methods from
  https://github.com/seagle0128/doom-modeline/issues/187 sort of
  worked to make modeline smaller.

  #+begin_src emacs-lisp
(use-package doom-modeline
  :disabled
  :if window-system
  :ensure t
  :custom
  (doom-modeline-height 5)
  :config
  (doom-modeline-mode)
  (defun my-doom-modeline--font-height ()
    "Calculate the actual char height of the mode-line."
    (+ (frame-char-height) 1))
  (advice-add #'doom-modeline--font-height
	      :override #'my-doom-modeline--font-height))
  #+end_src

* elpy

  #+begin_src emacs-lisp
(use-package elpy
  :ensure t
  :config
  (elpy-enable)
  :custom
  (python-shell-interpreter "ipython")
  (python-shell-interpreter-args "--i --simple-prompt"))
  #+end_src

* flyspell

  #+begin_src emacs-lisp
(use-package flyspell
  :init
  (flyspell-mode 1))
  #+end_src

* gap-mode                                                             :math:

  #+begin_src emacs-lisp
(use-package gap-mode
  :ensure t
  :custom
  (gap-executable "gap")
  (gap-start-options  '("-E" "-f" "-b" "-m" "1024m")))
  #+end_src

* helm

  Many =helm= commands have a prefix =C-x c=

  #+begin_src emacs-lisp
(use-package helm
  :ensure t
  :bind ("M-x" . helm-M-x)
  :config
  (use-package helm-unicode
    :ensure t))
  #+end_src
* helpful

  Helpful is an alternative to the built-in Emacs help that provides
  much more contextual information. https://github.com/Wilfred/helpful

  #+begin_src emacs-lisp
(use-package helpful
  :ensure t
  :bind 
  ("C-h C" . helpful-command) 
  ("C-h f" . helpful-callable) 
  ("C-h F" . helpful-function) 
  ("C-h k" . helpful-key) 
  ("C-h v" . helpful-variable))
  #+end_src

* ido

  #+begin_src emacs-lisp
(use-package ido
  :config
  (ido-mode 1))
  #+end_src

* magit

  #+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-c m" . magit-status))
  #+end_src

* markdown-mode

  https://jblevins.org/projects/markdown-mode/

  #+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t)
  #+end_src

* move-text

  https://github.com/emacsfodder/move-text

  #+begin_src emacs-lisp
(use-package move-text
  :ensure t
  :bind (([(super left)] . move-text-up)
	 ([(super right)] . move-text-down)))
  #+end_src

* org-mode

  #+begin_src emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :bind (("C-c a" . org-agenda)
	 ("C-c c" . org-capture)
	 ("C-c l" . org-store-link)
	 :map org-mode-map
	 ("$" . yf/org-electric-dollar)
	 ("|" . org-absolute-value)
	 ([?\s-j] . org-babel-next-src-block)
	 ([?\s-k] . org-babel-previous-src-block)
	 ([?\s-l] . org-edit-src-code)
	 :map org-src-mode-map
	 ([?\s-l] . org-edit-src-exit))
  :init
  ;; from Nicolas Richard <theonewiththeevillook@yahoo.fr>
  ;; Date: Fri, 8 Mar 2013 16:23:02 +0100
  ;; Message-ID: <87vc913oh5.fsf@yahoo.fr>
  (defun yf/org-electric-dollar nil
    "When called once, insert \\(\\) and leave point in between.
When called twice, replace the previously inserted \\(\\) by one $."
    (interactive)
    (if (and (looking-at "\\\\)") (looking-back "\\\\("))
	(progn (delete-char 2)
	       (delete-char -2)
	       (insert "$"))
      (insert "\\(\\)")
      (backward-char 2)))
  ;; see https://lists.gnu.org/archive/html/emacs-orgmode/2015-09/msg00118.html
  (defmacro by-backend (&rest body)
    `(case org-export-current-backend ,@body))
  ;; see http://endlessparentheses.com/ispell-and-org-mode.html
  (defun endless/org-ispell ()
    "Configure `ispell-skip-region-alist' for `org-mode'."
    (make-local-variable 'ispell-skip-region-alist)
    (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
    (add-to-list 'ispell-skip-region-alist '("~" "~"))
    (add-to-list 'ispell-skip-region-alist '("=" "="))
    (add-to-list 'ispell-skip-region-alist '("^#\\+begin_src" . "^#\\+end_src")))
  (defun org-absolute-value ()
    "Insert || and leave point inside when pressing |"
    (interactive)
    (if (org-inside-LaTeX-fragment-p)
	(progn
	  (insert "||")
	  (backward-char 1))
      (insert "|")))
  (defun my-org-mode-hook ()
    (turn-on-auto-revert-mode)
    (turn-on-org-cdlatex))
  :config
  (require 'ox-beamer)
  (use-package htmlize
    :ensure t)
  (use-package ob-ipython
    :if window-system
    :ensure t)
  (use-package ob-sagemath
    :ensure t)
  (use-package org-pomodoro
    :ensure t
    :commands (org-pomodoro)
    :custom
    (alert-user-configuration
     (quote ((((:category . "org-pomodoro")) libnotify nil))))
    (org-pomodoro-keep-killed-pomodoro-time t)
    (org-pomodoro-long-break-length 15))
  (use-package org-ref
    :ensure t
    :custom
    (org-ref-completion-library 'org-ref-helm-bibtex))
  (use-package ox-ipynb
    :load-path "ox-ipynb/")
  :custom
  (org-beamer-environments-extra
	'(("corollary"   "r" "\\begin{corollary}%a%U"   "\\end{corollary}")
	  ("lemma"       "l" "\\begin{lemma}%a%U"       "\\end{lemma}")
	  ("proposition" "P" "\\begin{proposition}%a%U" "\\end{proposition}")))
  (org-export-with-tags nil)
  (org-file-apps
   '((auto-mode . emacs)
     ("pdf" . "evince %s")))
  (org-highlight-latex-and-related '(latex))
  (org-latex-listings t)
  (org-log-done 'note)
  (org-return-follows-link t)
  (org-src-preserve-indentation t)
  (org-support-shift-select 'always)
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (ruby . t)
     (latex . t)))
  :hook
  (org-mode . my-org-mode-hook)
  (org-mode . endless/org-ispell)
  (org-babel-after-execute . org-redisplay-inline-images))
  #+end_src

* sage-shell-mode

  https://github.com/sagemath/sage-shell-mode

  #+begin_quote
  Emacs front end for SageMath
  #+end_quote

  #+begin_src emacs-lisp
(use-package sage-shell-mode
  :ensure t)
  #+end_src

* smartparens

  https://github.com/Fuco1/smartparens

  #+BEGIN_QUOTE
  Smartparens is a minor mode for dealing with pairs in Emacs.
  #+END_QUOTE

  #+begin_src emacs-lisp
(use-package smartparens
  :ensure t
  :config
  (require 'smartparens-config)
  (smartparens-global-mode 1)
  (show-smartparens-global-mode 1)
  (sp-local-pair 'org-mode "=" "="
		 :unless '(sp-point-after-word-p sp-in-math-p)
		 :post-handlers '(("[d1]" "SPC")))
  (sp-local-pair 'python-mode "``" "``"))
  #+end_src

* smex

  https://github.com/nonsequitur/smex/

  #+BEGIN_QUOTE
  Smex is a M-x enhancement for Emacs. Built on top of Ido, it
  provides a convenient interface to your recently and most frequently
  used commands. And to all the other commands, too.
  #+END_QUOTE

  #+begin_src emacs-lisp
(use-package smex
  :disabled
  :ensure t
  :bind ("M-x" . smex)
  :config (smex-initialize))
  #+end_src

* yasnippet

  https://github.com/joaotavora/yasnippet

  #+BEGIN_QUOTE
  YASnippet is a template system for Emacs. It allows you to type an
  abbreviation and automatically expand it into function
  templates. Bundled language templates include: C, C++, C#, Perl,
  Python, Ruby, SQL, LaTeX, HTML, CSS and more. The snippet syntax is
  inspired from TextMate's syntax, you can even import most TextMate
  templates to YASnippet. Watch a demo on YouTube.
  #+END_QUOTE

  #+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config (yas-global-mode))
  #+end_src

* zerodark-theme

  #+begin_src emacs-lisp
(use-package zerodark-theme
  :ensure t)
  #+end_src



* COMMENT Not for termux

** sage-shell-mode
