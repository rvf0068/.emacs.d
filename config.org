#+options: toc:nil date:nil author:nil

#+latex_header: \usepackage{listings}
#+latex_header: \lstdefinestyle{source}{basicstyle=\footnotesize\ttfamily,frame=tb}
#+latex_header: \lstset{style=source}
#+latex_header: \usepackage[margin=2.5cm]{geometry}

* init

  This makes it possible to clone this configuration and run it from any directory, by using the command =emacs -l -d mydirectory=. Personal configurations can go to a file =personal.el= or in an org file called =personal.org= in emacs-lisp blocks.

  A directory =backups= is created in the home directory, where Emacs will store the backups.

  There are two booleans define, to check if we are running on a termux system, or a windows system.

  Emacs will store customizations in a file =custom.el=.

  #+begin_src emacs-lisp
(let ((default-directory my-emacs-personal-dir)
      (personal-el-file (expand-file-name "personal.el" my-emacs-personal-dir))
      (personal-org-file (expand-file-name "personal.org" my-emacs-personal-dir)))
  (make-directory default-directory t)
  ;; this adds also subdirectories of the personal dir to load-path
  (normal-top-level-add-subdirs-to-load-path)
  (if (file-exists-p personal-org-file)
      (org-babel-load-file personal-org-file)
    (if (file-exists-p personal-el-file)
	(load personal-el-file))))

(make-directory "~/backups/" t)

(defun make-backup-file-name (file-name)
  "Create the non-numeric backup file name for `file-name'."
  (require 'dired)
  (if (file-exists-p "~/backups")
      (concat (expand-file-name "~/backups/")
              (dired-replace-in-string "/" "-" file-name))
    (concat file-name "~")))

(setq confirm-nonexistent-file-or-buffer nil
      custom-file (concat user-emacs-directory "custom.el")
      ;; initial-buffer-choice (expand-file-name "welcome.org" my-emacs-dir)
      frame-title-format "%b: %+%+ %f"
      mouse-drag-copy-region t
      termux-p
      (or (string-suffix-p "linux-android" system-configuration)
	  (string-prefix-p "arm-unknown-linux" system-configuration))
      windows-p
      (string-suffix-p "mingw32" system-configuration))

(load custom-file 'noerror)
#+end_src

Here we include configuration stuff that does not seem to properly belong to a package configuration.

#+begin_src emacs-lisp
(column-number-mode t)
(global-visual-line-mode)

;; overwrite selected text
(delete-selection-mode t)

(if (not termux-p)
    (display-battery-mode))

(if windows-p
    (set-language-environment "UTF-8"))

(display-time)

;; from http://stackoverflow.com/a/9414763/577007
(defun prelude-copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))

;; From: sandipchitale@yahoo.com (Sandip Chitale)
;; Newsgroups: gnu.emacs.sources
;; Subject: CODE: Duplicate line or region backward or forward
;; Date: 7 Feb 2004 12:15:35 -0800
(defun duplicate-line-backward ()
  "Duplicate the current line backward."
  (interactive "*")
  (save-excursion
    (let ((contents (buffer-substring
                     (line-beginning-position)
                     (line-end-position))))
      (beginning-of-line)
      (insert contents ?\n)))
  (previous-line 1))

(defun duplicate-line-forward ()
  "Duplicate the current line forward."
  (interactive "*")
  (save-excursion
    (let ((contents (buffer-substring
                     (line-beginning-position)
                     (line-end-position))))
      (end-of-line)
      (insert ?\n contents)))
  (next-line 1))

(global-set-key [(super down)] 'duplicate-line-forward)
(global-set-key [(super up)] 'duplicate-line-backward)
  #+end_src

* abbrev

  #+begin_src emacs-lisp
(use-package abbrev
  :config
  (abbrev-mode 1)
  :hook
  (text-mode . abbrev-mode))
  #+end_src

* auctex                                                               :math:

  https://www.gnu.org/software/auctex/

  #+BEGIN_QUOTE
  AUCTeX is an extensible package for writing and formatting TeX files in GNU Emacs and XEmacs. It supports many different TeX macro packages, including AMS-TeX, LaTeX, Texinfo, ConTeXt, and docTeX (dtx files).
  #+END_QUOTE

  #+begin_src emacs-lisp
(use-package tex
  :ensure auctex
  :mode ("\\.tex\\'" . latex-mode)
  :mode ("\\.tikz\\'" . latex-mode)
  :init
  (defun my-latex-config ()
    (LaTeX-math-mode)
    (TeX-add-symbols '("emph" 1))
    (LaTeX-add-environments '("definition")
			    '("theorem")
			    '("lemma")
			    '("corollary")
			    '("definicion")
			    '("teorema")
			    '("lema")
			    '("corolario"))
    (TeX-run-style-hooks "tikz")
    (TeX-run-style-hooks "tkz-graph")
    (TeX-run-style-hooks "tkz-berge"))
  :custom
  (TeX-auto-save t)
  (TeX-electric-escape t)
  (TeX-insert-braces nil)
  (TeX-parse-self t)
  (TeX-save-query nil)
  (reftex-plug-into-AUCTeX t)
  (reftex-use-external-file-finders t)
  :hook
  (LaTeX-mode . my-latex-config)
  (LaTeX-mode . turn-on-reftex))
  #+end_src

* bibretrieve

  https://github.com/pzorin/bibretrieve

  #+begin_quote
  An Emacs library for searching and downloading BibTeX entries from the web.
  #+end_quote

  #+begin_src emacs-lisp
(use-package bibretrieve
  :ensure t)
  #+end_src

* cdlatex                                                              :math:

  https://staff.fnwi.uva.nl/c.dominik/Tools/cdlatex/

  #+BEGIN_QUOTE
  CDLaTeX is a minor mode for Emacs supporting fast insertion of environment templates and math stuff in LaTeX. Similar commands are also offered as part of the AUCTeX package, but it is not the same - CDLaTeX focuses on speediness for inserting LaTeX constructs. I myself am using CDLaTeX on top of AUCTeX.
  #+END_QUOTE

  The settings in =cdlatex-math-symbol-alist= are useful also when writing math in org-mode.

  #+begin_src emacs-lisp
(use-package cdlatex
  :ensure t
  :custom
  (cdlatex-math-symbol-alist
   '(( ?c   ("\\colon"))
     ( ?m   ("\\mu" "\\mapsto"))
     ( ?p   ("\\pi" "\\varpi" "\\perp"))
     ( ?o   ("\\omega" "\\oplus"))
     ( ?O   ("\\Omega" "\\mathrm{Orb}"))
     ( ?S   ("\\Sigma" "\\mathrm{Stab}"))
     ( ?T   ("\\bigtriangleup"))
     ( ?-   ("\\cap" "\\leftrightarrow" "\\longleftrightarrow"))
     ( ?.   ("\\ldots" "\\cdots" "\\cdot"))
     ( ?*   ("\\times" "\\otimes"))
     ( ?<   ("\\leq" "\\langle"))
     ( ?>   ("\\geq" "\\rangle"))
     ( ?\[  ("\\subseteq"))))
  (cdlatex-math-modify-alist
   '(( ?a "\\overrightarrow" nil t nil nil)
     ( ?k "\\mathfrak" nil t nil nil)
     ( ?B "\\mathbb"         nil t nil nil)))
  (cdlatex-command-alist
   '(("bin"  "Insert \\binom{}{}"
      "\\binom{?}{}"       cdlatex-position-cursor nil nil t)
     ("norm" "Insert \\Vert \\Vert"
      "\\Vert ?\\Vert"     cdlatex-position-cursor nil nil t)
     ("gen"  "Insert \\langle \\rangle"
      "\\langle ?\\rangle" cdlatex-position-cursor nil nil t)
     ("set"  "Insert a set"
      "\\{?\\mid \\}"      cdlatex-position-cursor nil nil t)))
  (cdlatex-simplify-sub-super-scripts nil))
  #+end_src

* counsel

  #+begin_src emacs-lisp
(use-package counsel
  :ensure t)
  #+end_src

* deft

  #+begin_src emacs-lisp
(use-package deft
  :ensure t
  :after org
  :bind
  ("C-c n d" . deft)
  :custom
  (deft-auto-save-interval 0)
  (deft-default-extension "org")
  ;;(deft-directory "/home/rafael/Dropbox/org/reading-notes/")
  (deft-extensions '("org" "tex"))
  (deft-file-naming-rules '((noslash . "-")
			    (nospace . "-")
			    (case-fn . downcase)))
  (deft-ignore-file-regexp "options\\.org\\|readme\\.org")
  (deft-recursive t)
  (deft-use-filter-string-for-filename t))
  #+end_src

* dired

  https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html

  #+begin_quote
  Dired makes an Emacs buffer containing a listing of a directory, and optionally some of its subdirectories as well. You can use the normal Emacs commands to move around in this buffer, and special Dired commands to operate on the listed files.
  #+end_quote

  #+begin_src emacs-lisp
(use-package dired
  :custom
  ;; these are the commands that dired will run when pressed "!"
  ;; we can cycle with "M-n", "M-p"
  ;; since there is a "." (regexp), this will work for all file types
  (dired-guess-shell-alist-user
   '(("." "xdg-open" "termux-share")))
  (dired-dwim-target t)
  :config
  ;; see http://pragmaticemacs.com/emacs/dynamically-filter-directory-listing-with-dired-narrow/
  (use-package dired-narrow
    :bind (:map dired-mode-map
		("/" . dired-narrow)))
  ;; both dired-aux and dired-x come with emacs
  (use-package dired-aux)
  (use-package dired-x))
  #+END_SRC

* djvu

  #+begin_src emacs-lisp
(use-package djvu
  :ensure t)
  #+end_src

* doom-modeline

  #+begin_src emacs-lisp
(use-package doom-modeline
  :if window-system
  :ensure t
  :custom
  (doom-modeline-buffer-file-name-style 'truncate-all)
  :config
  (doom-modeline-mode))
  #+end_src

* elpy

  #+begin_src emacs-lisp
(use-package elpy
  :ensure t
  :config
  (elpy-enable)
  :custom
  (python-shell-interpreter "ipython")
  (python-shell-interpreter-args "--i --simple-prompt"))
  #+end_src

* flyspell

  #+begin_src emacs-lisp
(use-package flyspell
  :ensure t
  :defer t
  :hook
  (prog-mode . flyspell-prog-mode)
  (text-mode . flyspell-mode))
  #+end_src

* gap-mode                                                             :math:

  #+begin_src emacs-lisp
(use-package gap-mode
  :ensure t
  :custom
  (gap-executable "gap")
  (gap-start-options  '("-E" "-f" "-b" "-m" "1024m")))
  #+end_src

* helm

  Many =helm= commands have a prefix =C-x c=. For example, =C-x c 8= runs =helm-ucs=, which lets choose and insert an unicode character.

  #+begin_src emacs-lisp
(use-package helm
  :ensure t
  :bind ("M-x" . helm-M-x))
  #+end_src

* helpful

  Helpful is an alternative to the built-in Emacs help that provides
  much more contextual information. https://github.com/Wilfred/helpful

  #+begin_src emacs-lisp
(use-package helpful
  :ensure t
  :bind 
  ("C-h C" . helpful-command) 
  ("C-h f" . helpful-callable) 
  ("C-h F" . helpful-function) 
  ("C-h k" . helpful-key) 
  ("C-h v" . helpful-variable))
  #+end_src

* ido

  #+begin_src emacs-lisp
(use-package ido
  :config
  (ido-mode 1))
  #+end_src

* magit

  #+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-c m" . magit-status))
  #+end_src

* markdown-mode

  https://jblevins.org/projects/markdown-mode/

  #+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t)
  #+end_src

* move-text

  https://github.com/emacsfodder/move-text

  #+begin_src emacs-lisp
(use-package move-text
  :ensure t
  :bind (([(super left)] . move-text-up)
	 ([(super right)] . move-text-down)))
  #+end_src

* org-mode

  #+begin_src emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :bind (("C-c a" . org-agenda)
	 ("C-c c" . org-capture)
	 ("C-c l" . org-store-link)
	 :map org-mode-map
	 ;; these two next functions are defined in the :init section
	 ("$" . yf/org-electric-dollar)
	 ("|" . org-absolute-value)
	 ([?\s-j] . org-babel-next-src-block)
	 ([?\s-k] . org-babel-previous-src-block)
	 ([?\s-l] . org-edit-src-code)
	 :map org-src-mode-map
	 ([?\s-l] . org-edit-src-exit))
  :init
  ;; from Nicolas Richard <theonewiththeevillook@yahoo.fr>
  ;; Date: Fri, 8 Mar 2013 16:23:02 +0100
  ;; Message-ID: <87vc913oh5.fsf@yahoo.fr>
  (defun yf/org-electric-dollar nil
    "When called once, insert \\(\\) and leave point in between.
When called twice, replace the previously inserted \\(\\) by one $."
    (interactive)
    (if (and (looking-at "\\\\)") (looking-back "\\\\("))
	(progn (delete-char 2)
	       (delete-char -2)
	       (insert "$"))
      (insert "\\(\\)")
      (backward-char 2)))
  ;; filter
  (defun replace-math-md (contents backend info)
    (when (eq backend 'md)
      (s-with contents
	(replace-regexp-in-string "\\\\(" "\\\\\\\\(")
	(replace-regexp-in-string "\\\\)" "\\\\\\\\)"))))
  (add-to-list 'org-export-filter-final-output-functions
	       'replace-math-md)
  ;; see https://lists.gnu.org/archive/html/emacs-orgmode/2015-09/msg00118.html
  (defmacro by-backend (&rest body)
    `(case org-export-current-backend ,@body))
  ;; see http://endlessparentheses.com/ispell-and-org-mode.html
  (defun endless/org-ispell ()
    "Configure `ispell-skip-region-alist' for `org-mode'."
    (make-local-variable 'ispell-skip-region-alist)
    (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
    (add-to-list 'ispell-skip-region-alist '("~" "~"))
    (add-to-list 'ispell-skip-region-alist '("=" "="))
    (add-to-list 'ispell-skip-region-alist '("^#\\+begin_src" . "^#\\+end_src")))
  (defun org-absolute-value ()
    "Insert || and leave point inside when pressing |"
    (interactive)
    (if (org-inside-LaTeX-fragment-p)
	(progn
	  (insert "||")
	  (backward-char 1))
      (insert "|")))
  (defun my-org-mode-hook ()
    ;; https://emacs.stackexchange.com/a/63581/29
    ;; do not expand abbrevs in org-mode block sources
    (setq abbrev-expand-function (lambda ()
				   (unless (org-in-src-block-p)
				     (abbrev--default-expand))))
    (org-fragtog-mode)
    (turn-on-auto-revert-mode)
    (turn-on-org-cdlatex))
  :config
  (require 'ox-beamer)
  (use-package htmlize
    :ensure t)
  (use-package ob-ipython
    :disabled
    :if window-system
    :ensure t)
  (use-package ob-sagemath
    :ensure t)
  (use-package org-fragtog
    :ensure t)
  (use-package org-mime
    :ensure t)
  (use-package org-pomodoro
    :ensure t
    :commands (org-pomodoro)
    :custom
    (alert-user-configuration
     (quote ((((:category . "org-pomodoro")) libnotify nil))))
    (org-pomodoro-keep-killed-pomodoro-time t)
    (org-pomodoro-long-break-length 15))
  (use-package org-ref
    :ensure t
    :custom
    (org-ref-completion-library 'org-ref-helm-bibtex))
  (use-package ox-ipynb
    :load-path "ox-ipynb/")
  :custom
  (org-beamer-environments-extra
	'(("conjecture"   "j" "\\begin{conjecture}%a%U"   "\\end{conjecture}")
	  ("corollary"   "r" "\\begin{corollary}%a%U"   "\\end{corollary}")
	  ("lemma"       "l" "\\begin{lemma}%a%U"       "\\end{lemma}")
	  ("proposition" "P" "\\begin{proposition}%a%U" "\\end{proposition}")))
  (org-export-with-tags nil)
  (org-file-apps
   '((auto-mode . emacs)
     ("pdf" . "evince %s")))
  (org-hide-emphasis-markers t)
  (org-highlight-latex-and-related '(latex))
  (org-latex-listings t)
  (org-log-done 'note)
  (org-return-follows-link t)
  (org-src-preserve-indentation t)
  (org-support-shift-select 'always)
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((dot .t)
     (latex . t)
     (python . t)
     (ruby . t)))
  (font-lock-add-keywords 'org-mode
			  '(("^ *\\([-]\\) "
			     (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  (let* ((variable-tuple
          (cond ((x-list-fonts "Fira Sans")         '(:font "Fira Sans"))
                ((x-list-fonts "Georgia") '(:font "Georgia"))
                ((x-list-fonts "URW Palladio L")   '(:font "URW Palladio L"))
                ((x-list-fonts "Verdana")         '(:font "Verdana"))
                ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
         (base-font-color     (face-foreground 'default nil 'default))
         (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

    (custom-theme-set-faces
     'user
     `(org-level-8 ((t (,@headline ,@variable-tuple))))
     `(org-level-7 ((t (,@headline ,@variable-tuple))))
     `(org-level-6 ((t (,@headline ,@variable-tuple))))
     `(org-level-5 ((t (,@headline ,@variable-tuple))))
     `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
     `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.2))))
     `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.3))))
     `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.5))))
     `(org-document-title ((t (,@headline ,@variable-tuple :height 1.75 :underline nil))))))
  :hook
  (org-mode . my-org-mode-hook)
  (org-mode . endless/org-ispell)
  (org-babel-after-execute . org-redisplay-inline-images))
  #+end_src

* sage-shell-mode

  https://github.com/sagemath/sage-shell-mode

  #+begin_quote
  Emacs front end for SageMath
  #+end_quote

  #+begin_src emacs-lisp
(use-package sage-shell-mode
  :ensure t)
  #+end_src

* smartparens

  https://github.com/Fuco1/smartparens

  #+BEGIN_QUOTE
  Smartparens is a minor mode for dealing with pairs in Emacs.
  #+END_QUOTE

  #+begin_src emacs-lisp
(use-package smartparens
  :ensure t
  :config
  (require 'smartparens-config)
  (smartparens-global-mode 1)
  (show-smartparens-global-mode 1)
  (sp-local-pair 'org-mode "=" "="
		 :unless '(sp-point-after-word-p sp-in-math-p)
		 :post-handlers '(("[d1]" "SPC")))
  (sp-local-pair 'python-mode "``" "``"))
  #+end_src

* visual-fill-column

  https://github.com/joostkremers/visual-fill-column

  #+begin_quote
visual-fill-column-mode is a small Emacs minor mode that mimics the effect of fill-column in visual-line-mode. Instead of wrapping lines at the window edge, which is the standard behaviour of visual-line-mode, it wraps lines at fill-column. If fill-column is too large for the window, the text is wrapped at the window edge. Told in images, visual-fill-column turns the view on the left into the view on the right, without changing the contents of the file:
  #+end_quote

  #+begin_src emacs-lisp
(use-package visual-fill-column
  :ensure t)
  #+end_src

* yasnippet

  https://github.com/joaotavora/yasnippet

  #+BEGIN_QUOTE
  YASnippet is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates. Bundled language templates include: C, C++, C#, Perl, Python, Ruby, SQL, LaTeX, HTML, CSS and more. The snippet syntax is inspired from TextMate's syntax, you can even import most TextMate templates to YASnippet. Watch a demo on YouTube.
  #+END_QUOTE

  Setting =yas-indent-line= to fixed has the effect that the text expanded by a snipped is indented as much as where the snipped is invoked.
  
  #+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config (yas-global-mode)
  :custom
  (yas-indent-line 'fixed))
  #+end_src
